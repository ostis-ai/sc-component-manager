{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentation","text":"<p>Welcome to the sc-component-manager documentation! This comprehensive guide is designed to help you navigate the features, functionalities, and applications of sc-component-manager, a C++ software package to manage component within the OSTIS Technology.</p>"},{"location":"#what-is-sc-component-manager","title":"What is sc-component-manager?","text":"<p>sc-component-manager is a software package to manage components of systems designed with the OSTIS Technology. It extends the capabilities of the sc-machine, which serves as a tool for creating, searching and distributing components of ostis-systems.</p> <p>Table of contents:</p> <ul> <li>Quick Start - get up and running with sc-component-manager quickly</li> <li>Usage - how to use sc-component-manager</li> <li>Build Instructions - guidelines for building the project, configuring settings<ul> <li>Quick Start for Contributors - get up and start developing sc-component-manager quickly</li> <li>Build System - how to build the project and use it as a library</li> <li>CMake Flags - description of CMake flags used to configure sc-component-manager</li> </ul> </li> <li>Development - guidelines for contributing to development<ul> <li>Contributing Guide - guide for those who wants to make contribution to sc-component-manager</li> <li>Codestyle Guide - guide for those who wants to write code for sc-component-manager</li> </ul> </li> <li>License</li> <li>Changelog</li> </ul>"},{"location":"CONTRIBUTING/","title":"Contributing Guide","text":"<p>This page describes rules to contribute changes and features by Pull Requests creating.</p>"},{"location":"CONTRIBUTING/#initialize","title":"Initialize","text":"<p>To initialize your repo do:</p> <ul> <li>Fork <code>https://github.com/ostis-ai/sc-component-manager</code>.</li> <li>Clone your fork to your machine and prepare (see Readme).</li> </ul> <pre><code>git clone git@github.com:yourlogin/sc-component-manager.git\ncd sc-component-manager\ngit remote add upstream git@github.com:ostis-ai/sc-component-manager.git\n</code></pre> <ul> <li>To update your <code>main</code> from <code>upstream</code> use:</li> </ul> <pre><code>git fetch upstream\ngit checkout upstream/main\n</code></pre> <ul> <li>Use <code>git rebase</code> instead of <code>merge</code>. See documentation about this command. To rebase your branch against main use:</li> </ul> <pre><code>git checkout &lt;yourbranch&gt;\ngit rebase upstream/main\n</code></pre> <ul> <li>If you have any problems, then redo:</li> </ul> <pre><code>git rebase --abort\n</code></pre> <ul> <li>Or ask in Element.</li> </ul>"},{"location":"CONTRIBUTING/#commits-message-format","title":"Commits message format","text":"<p>Each commit message should be formed as: <code>[tag1]...[tagN] Message text (#issue)</code>.</p> <p>Message text should start from an upper case letter. If commit doesn't fix or implement any #issue, then it shouldn't be pointed in commit message.</p> <p>Examples:</p> <pre>\n[kb] Update test components specification\n[init][test] Add unit test for init command\n[utils] Add get specification address util\n</pre> <p>Possible tags:</p> <ul> <li><code>[config]</code> - changes in configuration files;</li> <li><code>[init]</code> - changes in <code>init</code> command;</li> <li><code>[install]</code> - changes in <code>install</code> module;</li> <li><code>[search]</code> - changes in <code>search</code> module;</li> <li><code>[utils]</code> - changes in <code>utils</code>;</li> <li><code>[keynodes]</code> - changes in <code>keynodes</code> module;</li> <li><code>[kb]</code> - changes in <code>kb</code> module;</li> <li><code>[downloader]</code> - changes in <code>downloader</code> module;</li> <li><code>[interface]</code> - changes in <code>command line interface</code> module;</li> <li><code>[review]</code> - commits with review fixes;</li> <li><code>[refactor]</code> - commits with some code refactoring;</li> <li><code>[changelog]</code> - use when you update changelog;</li> <li><code>[docs]</code> - use when you update documentation;</li> <li><code>[scripts]</code> - updates in the <code>sc-component_manager/scripts</code> files;</li> <li><code>[ci]</code> - changes in <code>ci</code> configuration or scripts;</li> <li><code>[git]</code> - changes in <code>git</code> configuration;</li> <li><code>[cmake]</code> - changes in <code>cmake</code> build system;</li> <li><code>[tests]</code> - changes in <code>tests</code>.</li> </ul> <p>Each commit in Pull Request should be an atomic. In other words, it should implement or fix one feature. For example:</p> <pre>\nLast commit\n...\n[utils][test] Add unit test for get specification address util\n[utils] Add get specification address util\n...\nInit commit\n</pre> <p>Commits should be small in size excluding cases, with:</p> <ul> <li>CodeStyle changes; </li> <li>Renames; </li> <li>Code formatting.</li> </ul> <p>Do atomic commits for each changes. For example if you rename some members in <code>ClassX</code> and <code>ClassY</code>, then do two commits:</p> <pre>\n[refactor] Rename members in ClassX according to codestyle\n[refactor] Rename members in ClassY according to codestyle\n</pre> <p>Do not mix codestyle changes and any logical fixes in one commit.</p> <p>All commits that not follow these rules should be split according to these rules. Otherwise they will be rejected with Pull Request.</p>"},{"location":"CONTRIBUTING/#pull-request","title":"Pull Request","text":"<p>Each Pull Request with many changes, that not possible to review (excluding codestyle, rename changes), will be rejected.</p>"},{"location":"CONTRIBUTING/#pull-request-preparation","title":"Pull Request Preparation","text":"<ul> <li>Read rules to create PR in documentation;</li> <li>Update changelog;</li> <li>Update documentation;</li> <li>Cover new functionality by tests;</li> <li>Your code should be written according to a codestyle like in sc-machine (see Codestyle rules).</li> </ul>"},{"location":"CONTRIBUTING/#pull-request-creation","title":"Pull Request Creation","text":"<ul> <li>Create PR on GitHub;</li> <li>Check that CI checks were passed successfully.</li> </ul>"},{"location":"CONTRIBUTING/#pull-request-review","title":"Pull Request Review","text":"<ul> <li>Reviewer tests code from PR if CI doesn't do it;</li> <li>Reviewer submits review as set of conversations;</li> <li>Author makes review fixes at <code>Review fixes</code> commits;</li> <li>Author re-requests review;</li> <li>Reviewer resolves conversations and approves PR if conversations were fixed.</li> </ul>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"changelog/#020-09032025","title":"[0.2.0] - 09.03.2025","text":""},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Use generator Ninja in CMakePresets.json</li> <li>Rename Conan remote repository url to https://conan.ostis.net/artifactory/api/conan/ostis-ai-library</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Distribute tests by modules</li> <li>Make init-lib and console-interface as object libraries to avoid problems of dynamic loading</li> </ul>"},{"location":"changelog/#010-12022025","title":"[0.1.0] - 12.02.2025","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Intro for sc-component-manager in docs</li> <li>CMake flags section in docs</li> <li>Quick start section for users in docs</li> <li>Quick start section for Contributors in docs</li> <li>Describe myself decomposition</li> <li>Add components logging</li> <li>Update clang-format</li> <li>Agents for init, search, install commands</li> <li>Documentation of CLion cmake-configuration</li> <li>Download components from a separate directory of a repository, not to clone all repository </li> <li>Add repository url parser to get information from GitHub repository link</li> <li>Add installation of kb/ps/interface components to the relevant directories</li> <li>Add quiet installation mode</li> <li>Add SCn documentation</li> <li>Add SCn documentation environment</li> <li>Add contributing document</li> <li>Add codestyle document</li> <li>Add git workflow</li> <li>Add changelog</li> <li>Add license</li> <li>Add utils</li> <li>Add loading for downloaded scs files</li> <li>Add logging</li> <li>Add components install command</li> <li>Add components search command</li> <li>Add components init command</li> <li>Add storage config and config parser</li> <li>Create base environment to run commands</li> <li>Add commands redaction </li> <li>Add new search flags by note, purpose, main identifier, key sc-element</li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Build sc-component-manager with conan-provided dependencies</li> <li>Install sc-machine with conan</li> <li>Rename questions to actions</li> <li>Make sc-component-manager as shared library</li> <li>Separated envs from envs of sc-machine</li> <li>Replace ExecutionResult with bool and update logging.</li> <li>Decompose install command to functions</li> <li>Move storage configs to kb</li> </ul>"},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Check console pool for new strings; join thread with getline</li> <li>Processing commands with multiple string spaces</li> <li>Install a component while running <code>components install [name]</code> with no <code>--idtf</code> flag</li> <li>Exception while running <code>components search --explanation</code> with an empty substring</li> <li>Use nrel_authors instead of nrel_author</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>Remove codegen for agents</li> <li>Remove svn dependency</li> <li>Remove trunk folder when download git repository</li> <li>Remove storage parser</li> </ul>"},{"location":"quick_start/","title":"Quick Start","text":""},{"location":"quick_start/#use-sc-component-manager-as-an-extension-to-sc-machine","title":"Use sc-component-manager as an extension to sc-machine","text":""},{"location":"quick_start/#github-releases","title":"GitHub Releases","text":"<p>Note</p> <p>Currently, using sc-component-manager natively on Windows isn't supported.</p> <ol> <li> <p>Download pre-built artifacts of sc-machine from GitHub Releases and extract it to any location.</p> <p>To learn more about how to install and use sc-machine artifacts, see sc-machine quick start.</p> </li> <li> <p>Download pre-built artifacts of sc-component-manager from GitHub Releases and extract it to any location.</p> </li> <li> <p>Build component specifications located in <code>knowledge-base</code> directory at the root of the project:</p> <pre><code>./path/to/sc-builder/binary -i path/to/knowledge-base -o path/to/kb.bin --clear\n</code></pre> </li> <li> <p>Then specify the folder path to <code>lib/extensions</code> from extracted sc-component-manager folder when running the sc-machine binary:</p> <pre><code>./path/to/sc-machine/binary -s path/to/kb.bin \\\n    -e \"path/to/extracted/sc-component-manager/lib/extensions;path/to/sc-machine/lib/extensions\" \\\n    -c path/to/sc-component-manager.ini\n# if several paths to extensions are provided then they should be separated \n# by semicolon and wrapped in double quotes\n</code></pre> </li> <li> <p>Download component specifications from repositories. Execute the following command in a running terminal:</p> <pre><code>components init\n</code></pre> </li> <li> <p>Install components. For example, run:</p> <pre><code>components install part_ui\n</code></pre> </li> </ol> <p>To learn more about how to use sc-component-manager and to manage components with it, see this docs.</p> <p>In case you want to make changes to the project sources, please refer to the build system docs.</p>"},{"location":"quick_start/#common-issues","title":"Common issues","text":"<ul> <li>Can't load a whole repo using the command <code>components install --idtf &lt;component_identifier&gt;</code>. There is only a repository directory without source files.</li> </ul> <p>Solution: please make sure your Git is configured to be able to use <code>git sparse-checkout</code>.   <pre><code>git config --global core.sparseCheckoutCone true\ngit config --global core.sparseCheckout true\ngit config --global index.sparse true\n</code></pre>   You can see more in the official documentation.</p>"},{"location":"build/build_system/","title":"Build System","text":"<p>The sc-component-manager build system is based on the principles of the sc-machine build system. To learn more about them, read sc-machine build system documentation.</p>"},{"location":"build/build_system/#compilation-steps","title":"Compilation steps","text":"<p>This project uses CMake presets. These presets help manage different build configurations, making it easier to work with dependencies and streamline the build process.</p> <p>If you wish to use CLI instead, you can list all the available configurations in the <code>CMakePresets.json</code> file and pick one of the presets:</p> <pre><code>conan install . -s build_type=&lt;Debug|Release&gt; --build=missing\ncmake --list-presets\n</code></pre>"},{"location":"build/build_system/#configure-presets","title":"Configure presets","text":"<p>Configure presets define how the project is configured before building. They specify various settings, including whether to include tests and which dependencies to use.</p> Name Display Name Description Build location <code>debug-conan</code> Debug config (Conan) Debug config with tests (Conan dependencies used) build/Debug <code>release-conan</code> Release config (Conan) Release config (Conan dependencies used) build/Release <code>release-with-tests-conan</code> Release config with tests (Conan) Release config with tests (Conan dependencies used) build/Release"},{"location":"build/build_system/#build-presets","title":"Build presets","text":"<p>Build presets link to the configure presets and specify how to build the project. They determine the output directories based on the selected configuration.</p> Name Configure Preset Build location <code>debug</code> <code>debug-conan</code> build/Debug <code>release</code> <code>release-conan</code>, <code>release-with-tests-conan</code> build/Release"},{"location":"build/build_system/#recommendations","title":"Recommendations","text":"<ul> <li>For development and debugging, use the Debug config (Conan) (<code>debug-conan</code>) preset. This configuration includes options for testing and benchmarking.</li> <li>For production builds, choose the Release config (Conan) (<code>release-conan</code>) preset to create optimized builds without debugging information.</li> <li>If you need to run tests in a production build, select the Release config with tests (Conan) (<code>release-with-tests-conan</code>) preset.</li> </ul>"},{"location":"build/build_system/#example-usage","title":"Example usage","text":"<p>To build your project using these presets, you can use the following commands:</p> <pre><code># Use pipx to install Conan if not already installed\npipx install conan\n</code></pre> <pre><code># Install dependencies using Conan with Debug build type\nconan install . -s build_type=Debug --build=missing\n# Configure using debug-conan preset\ncmake --preset debug-conan\n# Build using debug preset\ncmake --build --preset debug\n</code></pre> <p>To build your project for release, you can build with tests to ensure everything works as expected:</p> <pre><code># Install dependencies using Conan with Debug build type\nconan install . -s build_type=Release --build=missing\n# Configure using release-with-tests preset\ncmake --preset release-with-tests-conan\n# Build using release preset\ncmake --build --preset release\n</code></pre> <p>We also define <code>INSTALL</code> instructions in our CMake. This routine can be launched by appending <code>--target install</code> to the <code>cmake --build --preset &lt;preset&gt;</code> folder. The result of this command will reside in <code>build/&lt;Release|Debug&gt;/install</code> (our default install folder). Install folder is basically a pack of portable executable files and shared libraries required to get sc-component-manager up and running, this command is intended to create clutter-free archives/folders with our code which you can then use in your own projects.</p>"},{"location":"build/cmake_flags/","title":"CMake Flags","text":""},{"location":"build/cmake_flags/#build-cache","title":"Build cache","text":"<p>This project uses ccache automatically if it's available in the system. To disable this, use flag <code>-DAUTO_CCACHE=OFF</code>.</p>"},{"location":"build/cmake_flags/#building-tests","title":"Building tests","text":"<pre><code>cmake --preset &lt;configure-preset&gt; -DSC_BUILD_TESTS=ON\ncmake --build --preset &lt;build-preset&gt;\n</code></pre>"},{"location":"build/cmake_flags/#code-formatting-with-clangformat","title":"Code formatting with CLangFormat","text":"<p>To check code with CLangFormat run: <pre><code>cmake --preset release-with-tests-conan -DSC_CLANG_FORMAT_CODE=ON\ncmake --build --preset release --target clangformat_check\n</code></pre></p> <p>or <pre><code>./scripts/clang/check_formatting.sh\n</code></pre></p> <p>To format code with CLangFormat run: <pre><code>cmake --preset release-with-tests-conan -DSC_CLANG_FORMAT_CODE=ON\ncmake --build --preset release --target clangformat\n</code></pre></p> <p>or <pre><code>./scripts/clang/format_code.sh\n</code></pre></p>"},{"location":"build/quick_start/","title":"Quick Start for Contributors","text":"<p>This guide provides short information for developers to start to work with sc-component-manager quickly. You can always learn more about the sc-component-manager's build system.</p>"},{"location":"build/quick_start/#install-project","title":"Install project","text":"<p>Install sc-component-manager via git:</p> <pre><code>git clone https://github.com/ostis-ai/sc-component-manager\ncd sc-component-manager\ngit submodule update --init --recursive\n</code></pre>"},{"location":"build/quick_start/#check-cmake","title":"Check CMake","text":"<p>Install pipx first using pipx installation guide if not already installed.</p> <p>Ensure you are using CMake version 3.24 or newer. Verify your version with:</p> <pre><code>cmake --version\n</code></pre> <p>To upgrade CMake, run:</p> <pre><code># Use pipx to install cmake if not already installed\npipx install cmake\npipx ensurepath\n# relaunch your shell after installation\nexec $SHELL\n</code></pre> <p>Install Ninja generator for CMake, to use CMake presets:</p> <pre><code># Use pipx to install ninja if not already installed\npipx install ninja\npipx ensurepath\n# relaunch your shell after installation\nexec $SHELL\n</code></pre>"},{"location":"build/quick_start/#start-develop-sc-component-manager-with-conan","title":"Start develop sc-component-manager with Conan","text":""},{"location":"build/quick_start/#install-conan","title":"Install Conan","text":"<p>Install Conan, to build sc-component-manager dependencies with Conan-provided dependencies:</p> <pre><code># Use pipx to install conan if not already installed\npipx install conan\npipx ensurepath\n# relaunch your shell after installation\nexec $SHELL\n</code></pre>"},{"location":"build/quick_start/#add-conan-remote-repository","title":"Add Conan remote repository","text":"<p>Add Conan remote repository with the specified URL:</p> <pre><code>conan remote add ostis-ai https://conan.ostis.net/artifactory/api/conan/ostis-ai-library\n</code></pre>"},{"location":"build/quick_start/#use-sc-component-manager-in-debug","title":"Use sc-component-manager in Debug","text":""},{"location":"build/quick_start/#install-dependencies-with-conan","title":"Install dependencies with Conan","text":"<p>sc-component-manager is an extension to sc-machine, so sc-machine is main dependency for sc-component-manager. To install it, run in the root of the project:</p> <pre><code>conan install . -s build_type=Debug --build=missing\n</code></pre>"},{"location":"build/quick_start/#build-sc-component-manager-in-debug","title":"Build sc-component-manager in Debug","text":"<p>To build sc-component-manager in debug mode using Conan-provided dependencies, run:</p> <pre><code># debug build type\ncmake --preset debug-conan\ncmake --build --preset debug\n</code></pre> <p>Note: By default, configure preset <code>debug</code> enables building sc-component-manager tests.</p>"},{"location":"build/quick_start/#run-sc-component-manager-tests-in-debug","title":"Run sc-component-manager tests in Debug","text":"<p>After that, you can go to <code>build/Debug</code> and run tests via <code>ctest</code>:</p> <pre><code>cd build/Debug\nctest -V\n</code></pre> <p>You can also check code formatting. To learn more, go to the CMake flags page.</p>"},{"location":"build/quick_start/#use-sc-component-manager-in-release","title":"Use sc-component-manager in Release","text":""},{"location":"build/quick_start/#install-dependencies-with-conan_1","title":"Install dependencies with Conan","text":"<p>To install it, run in the root of the project:</p> <pre><code>conan install . -s build_type=Release --build=missing\n</code></pre>"},{"location":"build/quick_start/#build-sc-component-manager-in-release","title":"Build sc-component-manager in Release","text":"<p>To build sc-component-manager in release mode using Conan-provided dependencies, run:</p> <pre><code># release build type without tests\ncmake --preset release-conan\ncmake --build --preset release\n</code></pre> <p>To build sc-component-manager with tests in release mode using Conan-provided dependencies, run:</p> <pre><code># release build type with tests\ncmake --preset release-with-tests-conan\ncmake --build --preset release\n</code></pre>"},{"location":"build/quick_start/#run-sc-component-manager-tests-in-release","title":"Run sc-component-manager tests in Release","text":"<p>After that, you can run tests:</p> <pre><code>cd build/Release\nctest -V\n</code></pre> <p>You can also check code formatting. To learn more, go to the CMake flags page.</p>"},{"location":"build/quick_start/#run-sc-component-manager","title":"Run sc-component-manager","text":"<p>Before launching sc-component-manager, extract sc-machine from GitHub Releases or build it.</p> <p>To launch sc-component-manager, run:</p> <pre><code>./path/to/sc-machine/binary -s path/to/kb.bin \\\n    -e \"sc-component-manager/&lt;Debug|Release&gt;/lib/extensions;path/to/sc-machine/lib/extensions\"\n# if several paths to extensions are provided then they should be separated \n# by semicolon and wrapped in double quotes\n</code></pre>"},{"location":"usage/usage/","title":"Usage","text":""},{"location":"usage/usage/#commands","title":"Commands","text":"Command Abbreviation Description Flags <code>components init</code> <code>ci</code>,  <code>comp init</code> Download specifications from repositories. <code>components search</code> <code>cs</code>,  <code>comp search</code>,  <code>comp s</code> Search a component specification in the knowledge base by author, class, key sc-element, explanation, note, purpose, or main identifier substring. <code>[--author &lt;author&gt;]</code> <code>[--class &lt;class&gt;]</code> <code>[--key &lt;key&gt;]</code> <code>[--explanation &lt;explanation&gt;]</code> <code>[--note &lt;note&gt;]</code> <code>[--purpose &lt;purpose&gt;]</code> <code>[--main-id &lt;main identifier&gt;]</code> <code>components install</code> <code>cinst</code>,  <code>comp inst</code> Install components by its system identifier or install the set of components. <code>[--idtf &lt;system_idtf&gt;]</code> or <code>[&lt;system_idtf&gt;]</code> - install by an identifier  <code>[--set &lt;set&gt;]</code> - install the set of components <p>Note</p> <p>If you are searching a string, you can put this string in quotes.</p> <p>Note</p> <p><code>knowledge-base/specifications.scs</code> contains the example of a repository specification.</p>"},{"location":"usage/usage/#debug-logs","title":"Debug Logs","text":"<p>To see sc-component-manager debug logs set <code>log_level</code> to <code>Debug</code> in <code>[sc-memory]</code> section of <code>sc-component-manager.ini</code></p>"},{"location":"usage/usage/#repository-and-components","title":"Repository and components","text":""},{"location":"usage/usage/#repository-specification","title":"Repository specification","text":"<p>The repository specification describes two primary sections: components and repositories:</p> <ul> <li>Components section represents a list of components that have addresses to Github repositories that contain component sources and their specifications.</li> <li>Repositories section includes addresses to Github repositories that contain other repository specifications.</li> </ul> <p>See example:</p> <pre><code>sc_component_manager_repository\n  &lt;- concept_repository;\n  -&gt; rrel_components_specifications: ..components_addresses;\n  -&gt; rrel_repositories_specifications: ..repositories_addresses;;\n\n..components_addresses\n  &lt;- sc_node_tuple;\n  -&gt; knowledge_base_ims_specification\n    (*\n      &lt;- concept_reusable_component_specification;;\n      =&gt; nrel_alternative_addresses:\n      ...\n      (*\n        &lt;- sc_node_tuple;;\n        -&gt; rrel_1:\n          ... \n          (*\n            -&gt; [https://github.com/ostis-ai/ims.ostis.kb]\n              (*\n                &lt;- concept_github_url;;\n              *);;\n          *);;\n      *);;\n    *);\n  -&gt; cat_kb_component_spec\n      (*\n           &lt;- concept_reusable_component_specification;;\n           =&gt; nrel_alternative_addresses:\n           ...\n           (*\n                &lt;- sc_node_tuple;;\n                -&gt; rrel_1:\n                ...\n                (*\n                  -&gt; [https://github.com/MksmOrlov/cat-kb-component]\n                      (*\n                        &lt;- concept_github_url;;\n                      *);;\n                *);;\n            *);;\n        *);;\n\n..repositories_addresses\n  -&gt; ... \n      (*\n      -&gt; rrel_address:\n          [https://github.com/MksmOrlov/components-repo-example];;\n      *);;\n</code></pre>"},{"location":"usage/usage/#component-specification","title":"Component specification","text":"<p>The component specification is a description of reusable component. </p> <p>See example:</p> <pre><code>cat_specification\n    &lt;- concept_reusable_component_specification;;\n\ncat_specification = [*\nconcept_cat\n    &lt;- concept_reusable_component;\n    &lt;- concept_atomic_reusable_component;\n    &lt;- concept_independent_reusable_component;\n    &lt;- concept_reusable_kb_component;\n    &lt;- concept_reusable_dynamically_installed_component;\n    &lt;- concept_reusable_source_code_component;\n\n    =&gt; nrel_sc_identifier: [Cat specification](* &lt;- lang_en;; *);\n    =&gt; nrel_key_sc_element: concept_animal;\n    =&gt; nrel_purpose: [Cat specification is needed to design knowledge bases about animal world, pets and zoo.](* &lt;- lang_en;; *);\n    =&gt; nrel_explanation: [Meow meow meow!] (*&lt;- lang_en;; *);\n    =&gt; nrel_authors: ... (* -&gt; Orlov;; *);\n    =&gt; nrel_component_dependencies: ... (* &lt;- empty_set;; *);\n\n    =&gt; nrel_component_address: [https://github.com/MksmOrlov/cat-kb-component] (* &lt;- concept_github_url;; *);\n    =&gt; nrel_installation_method: ... (* &lt;- concept_component_dynamically_installed_method;; *);;\n*];;\n</code></pre>"}]}